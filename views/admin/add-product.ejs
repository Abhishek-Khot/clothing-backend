<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50 min-h-screen">
    <!-- Sticky Admin Nav -->
    <header class="bg-indigo-700 shadow sticky top-0 z-10">
        <div class="container mx-auto flex justify-between items-center px-4 py-4">
            <a href="/admin/dashboard" class="text-2xl font-bold text-white tracking-wide">Unique Fashion Admin</a>
            <nav>
                <a href="/admin/dashboard" class="text-indigo-100 hover:text-white px-4">Dashboard</a>
                <a href="/" class="text-indigo-100 hover:text-white px-4">Home</a>
            </nav>
        </div>
    </header>
    <main class="container mx-auto px-4 py-10 flex flex-col items-center">
        <div class="w-full max-w-2xl bg-white rounded-xl shadow-lg p-8 mt-8">
            <h1 class="text-3xl font-bold mb-6 text-indigo-700">Add New Product</h1>
            <% if (typeof error !== 'undefined' && error) { %>
                <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
                    <p class="font-bold">Error</p>
                    <p><%= error %></p>
                </div>
            <% } %>
            <form action="/admin/add-product" method="POST" enctype="multipart/form-data" class="space-y-6">
                <div>
                    <label for="title" class="block text-sm font-medium text-gray-700">Product Title *</label>
                    <input type="text" id="title" name="title" required
                           value="<%= formData.title || '' %>"
                           class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 px-4 py-3">
                </div>
                <div>
                    <label for="description" class="block text-sm font-medium text-gray-700">Description *</label>
                    <textarea id="description" name="description" rows="3" required
                              class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 px-4 py-3"><%= formData.description || '' %></textarea>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="price" class="block text-sm font-medium text-gray-700">Price (₹) *</label>
                        <input type="number" step="0.01" id="price" name="price" required
                               value="<%= formData.price || '' %>"
                               class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 px-4 py-3">
                    </div>
                    <div>
                        <label for="category" class="block text-sm font-medium text-gray-700">Category *</label>
                        <select id="category" name="category" required
                                class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 px-4 py-3">
                            <option value="">Select a category</option>
                            <option value="T-shirts" <%= formData.category === 'T-shirts' ? 'selected' : '' %>>T-shirts</option>
                            <option value="Shorts" <%= formData.category === 'Shorts' ? 'selected' : '' %>>Shorts</option>
                            <option value="Shirts" <%= formData.category === 'Shirts' ? 'selected' : '' %>>Shirts</option>
                            <option value="Hoodie" <%= formData.category === 'Hoodie' ? 'selected' : '' %>>Hoodie</option>
                            <option value="Jeans" <%= formData.category === 'Jeans' ? 'selected' : '' %>>Jeans</option>
                        </select>
                    </div>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Sizes *</label>
                    <div class="flex flex-wrap gap-4">
                        <% ['XS','S','M','L','XL','XXL'].forEach(size => { %>
                            <label class="inline-flex items-center">
                                <input type="checkbox" name="sizes" value="<%= size %>" <%= formData.sizes && formData.sizes.includes(size) ? 'checked' : '' %> class="form-checkbox h-5 w-5 text-indigo-600">
                                <span class="ml-2"><%= size %></span>
                            </label>
                        <% }) %>
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="discountAmount" class="block text-sm font-medium text-gray-700">Discount Amount (₹)</label>
                        <input type="number" step="0.01" id="discountAmount" name="discountAmount" 
                               value="<%= formData.discountAmount || '0' %>"
                               class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 px-4 py-3">
                    </div>
                    <div>
                        <label for="discountPercentage" class="block text-sm font-medium text-gray-700">Discount Percentage</label>
                        <input type="number" min="0" max="100" id="discountPercentage" name="discountPercentage" 
                               value="<%= formData.discountPercentage || '0' %>"
                               class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 px-4 py-3">
                    </div>
                </div>
                <div>
                    <label for="gallery" class="block text-sm font-medium text-gray-700">Product Images *</label>
                    <input type="file" id="gallery" name="gallery" accept="image/*" multiple required
                           class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 px-4 py-3">
                    <div id="imagePreview" class="mt-4 flex flex-wrap gap-4 hidden">
                        <!-- Image previews will be displayed here -->
                    </div>
                </div>
                <div class="flex justify-end space-x-4">
                    <a href="/admin/dashboard" class="px-6 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition">Cancel</a>
                    <button type="submit" class="px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 shadow font-semibold transition">Save Product</button>
                </div>
            </form>
        </div>
    </main>
    <script>
        // Client-side validation and discount calculation
        document.addEventListener('DOMContentLoaded', function() {
            const priceInput = document.getElementById('price');
            const discountAmountInput = document.getElementById('discountAmount');
            const discountPercentageInput = document.getElementById('discountPercentage');
            const galleryInput = document.getElementById('gallery');
            const imagePreview = document.getElementById('imagePreview');
            const form = document.querySelector('form');

            // Image preview functionality
            if (galleryInput) {
                galleryInput.addEventListener('change', function(e) {
                    const files = e.target.files;
                    imagePreview.innerHTML = '';
                    
                    if (files.length > 0) {
                        imagePreview.classList.remove('hidden');
                        
                        Array.from(files).forEach((file, index) => {
                            if (file.type.startsWith('image/')) {
                                const reader = new FileReader();
                                reader.onload = function(e) {
                                    const img = document.createElement('img');
                                    img.src = e.target.result;
                                    img.alt = `Preview ${index + 1}`;
                                    img.className = 'h-24 w-24 object-cover rounded border border-gray-300 shadow';
                                    
                                    const container = document.createElement('div');
                                    container.className = 'relative';
                                    container.appendChild(img);
                                    
                                    const label = document.createElement('span');
                                    label.className = 'absolute -top-2 -right-2 bg-indigo-500 text-white text-xs px-1 rounded';
                                    label.textContent = index === 0 ? 'Main' : index + 1;
                                    container.appendChild(label);
                                    
                                    imagePreview.appendChild(container);
                                };
                                reader.readAsDataURL(file);
                            }
                        });
                    } else {
                        imagePreview.classList.add('hidden');
                    }
                });
            }

            // Update discount percentage when amount changes
            if (discountAmountInput) {
                discountAmountInput.addEventListener('input', updateDiscountPercentage);
            }

            // Update discount amount when percentage changes
            if (discountPercentageInput) {
                discountPercentageInput.addEventListener('input', updateDiscountAmount);
            }

            function updateDiscountPercentage() {
                const price = parseFloat(priceInput.value) || 0;
                const discountAmount = parseFloat(discountAmountInput.value) || 0;
                if (price > 0) {
                    const percentage = (discountAmount / price) * 100;
                    discountPercentageInput.value = Math.round(percentage);
                }
            }

            function updateDiscountAmount() {
                const price = parseFloat(priceInput.value) || 0;
                const percentage = parseFloat(discountPercentageInput.value) || 0;
                const amount = (price * percentage) / 100;
                discountAmountInput.value = amount.toFixed(2);
            }
        });
    </script>
</body>
</html>
